/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export interface InstantiateMsg {
  admins: string[];
  protocol_address: string;
  protocol_percentage: number;
  whitelisted_addresses?: string[] | null;
}
export type ExecuteMsg = {
  receive_nft: CustomCw721ReceiveMsg;
} | {
  buy_ticket: {
    quantity: number;
    raffle_id: number;
  };
} | {
  end_raffle: {
    raffle_id: number;
  };
} | {
  update_whitelisted_addresses: {
    addresses: string[];
  };
} | {
  update_protocol_address: {
    address: string;
  };
} | {
  update_protocol_percentagee: {
    percentage: number;
  };
} | {
  enable_whitelist: {};
} | {
  disable_whitelist: {};
};
export type Binary = string;
export interface CustomCw721ReceiveMsg {
  edition?: string | null;
  msg: Binary;
  sender: string;
  token_id: string;
}
export type QueryMsg = {
  config: {};
} | {
  get_raffle: {
    raffle_id: number;
  };
} | {
  get_user_ticket_count: {
    raffle_id: number;
    user: string;
  };
} | {
  get_all_raffles: {
    limit?: number | null;
    start_after?: string | null;
  };
} | {
  get_ongoing_raffles: {
    limit?: number | null;
    start_after?: string | null;
  };
} | {
  get_ended_raffles: {
    limit?: number | null;
    start_after?: string | null;
  };
} | {
  get_raffle_tickets: {
    raffle_id: number;
  };
} | {
  get_raffles_by_winner: {
    limit?: number | null;
    start_after?: string | null;
    user: string;
  };
} | {
  get_raffles_by_owner: {
    limit?: number | null;
    start_after?: string | null;
    user: string;
  };
};
export type Addr = string;
export interface Config {
  admins: Addr[];
  is_whitelist_enabled: boolean;
  protocol_address: Addr;
  protocol_percentage: number;
  whitelisted_addresses?: Addr[] | null;
  [k: string]: unknown;
}
export type ArrayOfRaffle = Raffle[];
export interface Raffle {
  cw721_contract_addr: Addr;
  has_ended: boolean;
  max_ticket_per_user?: number | null;
  owner: Addr;
  raffle_end_time?: number | null;
  raffle_id: number;
  ticket_price: number;
  timestamp: number;
  token_id: string;
  total_coins_collected: number;
  total_tickets_available_for_sale?: number | null;
  total_tickets_bought: number;
  winner?: Addr | null;
  winner_ticket_id?: number | null;
}
export type ArrayOfTicket = Ticket[];
export interface Ticket {
  owner: Addr;
  raffle_id: number;
  timestamp: number;
}
export interface UserTicketCountResponse {
  count: number;
}