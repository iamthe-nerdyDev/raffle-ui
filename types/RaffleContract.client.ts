/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Binary, CustomCw721ReceiveMsg, QueryMsg, Addr, Config, ArrayOfRaffle, Raffle, ArrayOfTicket, Ticket, UserTicketCountResponse } from "./RaffleContract.types";
export interface RaffleContractReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<Config>;
  getRaffle: ({
    raffleId
  }: {
    raffleId: number;
  }) => Promise<Raffle>;
  getUserTicketCount: ({
    raffleId,
    user
  }: {
    raffleId: number;
    user: string;
  }) => Promise<UserTicketCountResponse>;
  getAllRaffles: ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }) => Promise<ArrayOfRaffle>;
  getOngoingRaffles: ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }) => Promise<ArrayOfRaffle>;
  getEndedRaffles: ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }) => Promise<ArrayOfRaffle>;
  getRaffleTickets: ({
    raffleId
  }: {
    raffleId: number;
  }) => Promise<ArrayOfTicket>;
  getRafflesByWinner: ({
    limit,
    startAfter,
    user
  }: {
    limit?: number;
    startAfter?: string;
    user: string;
  }) => Promise<ArrayOfRaffle>;
  getRafflesByOwner: ({
    limit,
    startAfter,
    user
  }: {
    limit?: number;
    startAfter?: string;
    user: string;
  }) => Promise<ArrayOfRaffle>;
}
export class RaffleContractQueryClient implements RaffleContractReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.getRaffle = this.getRaffle.bind(this);
    this.getUserTicketCount = this.getUserTicketCount.bind(this);
    this.getAllRaffles = this.getAllRaffles.bind(this);
    this.getOngoingRaffles = this.getOngoingRaffles.bind(this);
    this.getEndedRaffles = this.getEndedRaffles.bind(this);
    this.getRaffleTickets = this.getRaffleTickets.bind(this);
    this.getRafflesByWinner = this.getRafflesByWinner.bind(this);
    this.getRafflesByOwner = this.getRafflesByOwner.bind(this);
  }
  config = async (): Promise<Config> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  getRaffle = async ({
    raffleId
  }: {
    raffleId: number;
  }): Promise<Raffle> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_raffle: {
        raffle_id: raffleId
      }
    });
  };
  getUserTicketCount = async ({
    raffleId,
    user
  }: {
    raffleId: number;
    user: string;
  }): Promise<UserTicketCountResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_user_ticket_count: {
        raffle_id: raffleId,
        user
      }
    });
  };
  getAllRaffles = async ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }): Promise<ArrayOfRaffle> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_all_raffles: {
        limit,
        start_after: startAfter
      }
    });
  };
  getOngoingRaffles = async ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }): Promise<ArrayOfRaffle> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_ongoing_raffles: {
        limit,
        start_after: startAfter
      }
    });
  };
  getEndedRaffles = async ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }): Promise<ArrayOfRaffle> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_ended_raffles: {
        limit,
        start_after: startAfter
      }
    });
  };
  getRaffleTickets = async ({
    raffleId
  }: {
    raffleId: number;
  }): Promise<ArrayOfTicket> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_raffle_tickets: {
        raffle_id: raffleId
      }
    });
  };
  getRafflesByWinner = async ({
    limit,
    startAfter,
    user
  }: {
    limit?: number;
    startAfter?: string;
    user: string;
  }): Promise<ArrayOfRaffle> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_raffles_by_winner: {
        limit,
        start_after: startAfter,
        user
      }
    });
  };
  getRafflesByOwner = async ({
    limit,
    startAfter,
    user
  }: {
    limit?: number;
    startAfter?: string;
    user: string;
  }): Promise<ArrayOfRaffle> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_raffles_by_owner: {
        limit,
        start_after: startAfter,
        user
      }
    });
  };
}
export interface RaffleContractInterface extends RaffleContractReadOnlyInterface {
  contractAddress: string;
  sender: string;
  receiveNft: ({
    edition,
    msg,
    sender,
    tokenId
  }: {
    edition?: string;
    msg: Binary;
    sender: string;
    tokenId: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  buyTicket: ({
    quantity,
    raffleId
  }: {
    quantity: number;
    raffleId: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  endRaffle: ({
    raffleId
  }: {
    raffleId: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateWhitelistedAddresses: ({
    addresses
  }: {
    addresses: string[];
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateProtocolAddress: ({
    address
  }: {
    address: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateProtocolPercentagee: ({
    percentage
  }: {
    percentage: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  enableWhitelist: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  disableWhitelist: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class RaffleContractClient extends RaffleContractQueryClient implements RaffleContractInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.receiveNft = this.receiveNft.bind(this);
    this.buyTicket = this.buyTicket.bind(this);
    this.endRaffle = this.endRaffle.bind(this);
    this.updateWhitelistedAddresses = this.updateWhitelistedAddresses.bind(this);
    this.updateProtocolAddress = this.updateProtocolAddress.bind(this);
    this.updateProtocolPercentagee = this.updateProtocolPercentagee.bind(this);
    this.enableWhitelist = this.enableWhitelist.bind(this);
    this.disableWhitelist = this.disableWhitelist.bind(this);
  }
  receiveNft = async ({
    edition,
    msg,
    sender,
    tokenId
  }: {
    edition?: string;
    msg: Binary;
    sender: string;
    tokenId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      receive_nft: {
        edition,
        msg,
        sender,
        token_id: tokenId
      }
    }, fee, memo, _funds);
  };
  buyTicket = async ({
    quantity,
    raffleId
  }: {
    quantity: number;
    raffleId: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      buy_ticket: {
        quantity,
        raffle_id: raffleId
      }
    }, fee, memo, _funds);
  };
  endRaffle = async ({
    raffleId
  }: {
    raffleId: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      end_raffle: {
        raffle_id: raffleId
      }
    }, fee, memo, _funds);
  };
  updateWhitelistedAddresses = async ({
    addresses
  }: {
    addresses: string[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_whitelisted_addresses: {
        addresses
      }
    }, fee, memo, _funds);
  };
  updateProtocolAddress = async ({
    address
  }: {
    address: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_protocol_address: {
        address
      }
    }, fee, memo, _funds);
  };
  updateProtocolPercentagee = async ({
    percentage
  }: {
    percentage: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_protocol_percentagee: {
        percentage
      }
    }, fee, memo, _funds);
  };
  enableWhitelist = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      enable_whitelist: {}
    }, fee, memo, _funds);
  };
  disableWhitelist = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      disable_whitelist: {}
    }, fee, memo, _funds);
  };
}